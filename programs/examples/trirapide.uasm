.include ../beta.uasm
. = VEC_RESET
	BEQ(R31,__start,R31)
. = VEC_II
	BEQ(R31,__InterruptionInstructionIllegale,R31)
. = VEC_CLK
	BEQ(R31,__InterruptionHorloge,R31)	
. = VEC_KBD
	BEQ(R31,__InterruptionClavier,R31)
. = VEC_MOUSE
	BEQ(R31,__InterruptionSouris,R31)


__start:	CMOVE(__DebutDuProgramme,R1)
		JMP(R1,R31)

.macro LDARG(i,REG)		LD(BP , - ((i + 3) * 4), REG)


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Instruction Illegale:                  |
|	Est appelee quand le compteur de programme    |
|	PC pointe vers une instruction illegale       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionInstructionIllegale:	JMP(XP)
	| On va a l'instrcution suivante de l'instruction Illegale


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Horloge:                               |
|	Avec Alpha, elle est appelee                  |
|       30 fois par secondes.                         |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionHorloge:			SUBC(XP,4,XP)
					JMP(XP)
	| On va a l'instrcution qui a ete interrompue
	| et donc pas executee.

|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Clavier:                               |
|	Est appelee a chaque fois qu'une              |
|	Touche est appuyee au clavier.                |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionClavier:			SUBC(XP,4,XP)
					JMP(XP)
	| On va a l'instrcution qui a ete interrompue
	| et donc pas executee.


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Souris:                                |
|	Est appelee a  chaque fois que la             |
|	souris bouge ou clique.                       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionSouris:			SUBC(XP,4,XP)
					JMP(XP)
	| On va a l'instrcution qui a ete interrompue
	| et donc pas executee.




|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Debut du programme:                                 |
|	Des que la machine demarre, elle va ici       |
|	et execute le code normalement.               |
|	souris bouge ou clique.                       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


tableau:		LONG(0xF)
                        LONG(0xA)
                        LONG(0x5)
                        LONG(0x8)
                        LONG(0x1)
                        LONG(0x4)
                        LONG(0x2)
                        LONG(0xE)
                        LONG(0x3)
                        LONG(0xC)
                        LONG(0x7)



.macro SWAP(tableau, i, j) PUSH(j) PUSH(i) PUSH(tableau) CALL(swap,3)
swap:	PUSH(LP)
	PUSH(BP)
	MOVE(SP,BP)

	PUSH(R1)
	PUSH(R2)
	PUSH(R3)
	PUSH(R4)
	PUSH(R5)

	LDARG(0,R1)
	LDARG(1,R2)
	LDARG(2,R3)

	MULC(R2,4,R2)
	ADD(R1,R2,R2)
	LD(R2,0,R4)

	MULC(R3,4,R3)
	ADD(R1,R3,R3)
	LD(R3,0,R5)

	ST(R5,0,R2)
	ST(R4,0,R3)

	POP(R5)
	POP(R4)
	POP(R3)
	POP(R2)
	POP(R1)
	POP(BP)
	POP(LP)
	JMP(LP,R31)

.macro PARTITIONNER(tableau, gauche, pivot, dernier) PUSH(dernier) PUSH(pivot) PUSH(gauche) PUSH(tableau) CALL(partitionner,4)

partitionner:		PUSH(LP)
			PUSH(BP)
			MOVE(SP,BP)

			ADD(R20,1,R20)

			PUSH(R1)
			PUSH(R2)
			PUSH(R3)
			PUSH(R4)
			PUSH(R5)
			PUSH(R6)
			PUSH(R7)

			LDARG(0,R1) 		| R1 = tableau
			LDARG(1,R2)		| R2 = gauche
			LDARG(2,R3)		| R3 = pivot
			LDARG(3,R4)		| R4 = dernier


			MULC(R3,4,R5)
			ADD(R1,R5,R5)		| R5 = adresse du pivot
			LD(R5,0,R5)		| R5 = valeur du pivot

			SWAP(R1,R3,R4)

			SUBC(R4,1,R6)		| R6 = droite

partitionnerCond:	CMPLE(R2,R6,R7)
			BEQ(R7,partitionnerWhileFin,R31)

			MULC(R2,4,R7)		| R7 = decalage de gauche en octets
			ADD(R1,R7,R7)		| R7 = adresse de tableau[gauche]
			LD(R7,0,R7)		| R7 = tableau[gauche]
			CMPLE(R7,R5,R7)		| R7 = tableau[gauche] <= valeurPivot
			
			BEQ(R7,partitionner1,R31)
			ADDC(R2,1,R2)
			BEQ(R31,partitionnerCond,R31)

partitionner1:		MULC(R6,4,R7)		| R7 = decalage de doite en octets
			ADD(R1,R7,R7)		| R7 = adresse de tableau[droite]
			LD(R7,0,R7)		| R7 = tableau[droite]
			CMPLT(R5,R7,R7)		| R7 = valeurPivot < tableau[droite]

			BEQ(R7,partitionner2,R31)
			SUBC(R6,1,R6)
			BEQ(R31,partitionnerCond,R31)

partitionner2:		SWAP(R1,R2,R6)
			ADDC(R2,1,R2)
			SUBC(R6,1,R6)

			BEQ(R31,partitionnerCond,R31)

partitionnerWhileFin:	SWAP(R1,R2,R4)
			MOVE(R2,R0)				

			POP(R7)
			POP(R6)
			POP(R5)
			POP(R4)
			POP(R3)
			POP(R2)
			POP(R1)
			POP(BP)
			POP(LP)
			JMP(LP,R31)



.macro TRIRAPIDE(tableau, premier, dernier) PUSH(dernier) PUSH(premier) PUSH(tableau) CALL(triRapide,3)

triRapide:		PUSH(LP)
			PUSH(BP)
			MOVE(SP,BP)
			
			PUSH(R1)
			PUSH(R2)
			PUSH(R3)
			PUSH(R4)
			PUSH(R5)

			LDARG(0,R1)
			LDARG(1,R2)
			LDARG(2,R3)

			CMPLT(R2,R3,R4)
			BEQ(R4,triRapideFin,R31)

			ADD(R2,R3,R4)
			DIVC(R4,2,R4)	| R4 = (premier + dernier)/2

			PARTITIONNER(R1,R2,R4,R3)
			MOVE(R0,R4)	| R4 = place du pivot

			SUBC(R4,1,R5)	| R5 = place du pivot - 1
			TRIRAPIDE(R1,R2,R5)

			ADDC(R4,1,R5)	| R5 = place du pivot + 1
			TRIRAPIDE(R1,R5,R3)
			

triRapideFin:		POP(R5)
			POP(R4)
			POP(R3)
			POP(R2)
			POP(R1)
			POP(BP)
			POP(LP)
			JMP(LP,R31)


__DebutDuProgramme:	CMOVE(Pile,SP)
			CMOVE(0,R20)
			CMOVE(tableau,R1)
			CMOVE(0, R2)
			CMOVE(10,R3)
			TRIRAPIDE(R1,R2, R3)
boucleInfinie:		BEQ(R31,boucleInfinie,R31)
	| On boucle sur __DebutDuProgramme indefiniment.


Pile : STORAGE(10000)