.include ../beta.uasm
.include ../lib.uasm
. = VEC_RESET
	BEQ(R31,__DebutDuProgramme,R31)
. = VEC_II
	BEQ(R31,__InterruptionInstructionIllegale,R31)
. = VEC_CLK
	BEQ(R31,__InterruptionHorloge,R31)	
. = VEC_KBD
	BEQ(R31,__InterruptionClavier,R31)
. = VEC_MOUSE
	BEQ(R31,__InterruptionSouris,R31)


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Instruction Illegale:                  |
|	Est appelee quand le compteur de programme    |
|	PC pointe vers une instruction illegale       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||

__InterruptionInstructionIllegale:	JMP(XP)
	| On va aÂ  l'instrcution suivante de l'instruction Illegale



|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Horloge:                               |
|	Avec Alpha, elle est appelee                  |
|       30 fois par secondes.                         |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionHorloge:			SUBC(XP,4,XP)
					PUSH(R1)

					CMOVE(1,R1)		| On met a 1 la valeur
					ST(R1,horlogeTick,R31)	| de la variable horlogeTick

					POP(R1)
					JMP(XP)

|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|
| Fonction qui attend une interruption d'horloge
|
| attendHorloge()
|
|||||||||||||||||||||||||||||||||||||||||||||||||||||||

horlogeTick:	LONG(0)

attendHorloge:	PUSH(R1)

attendHorloge1:	LD(horlogeTick,R1)
		BEQ(R1, attendHorloge1, R31)
		ST(R31, horlogeTick, R1)

		POP(R1)
		JMP(LP,R31)

|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Clavier:                               |
|	Est appelee a chaque fois qu'une              |
|	Touche est appuyee au clavier.                |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionClavier:			SUBC(XP,4,XP)
					JMP(XP)
	| On va a l'instrcution qui a ete interrompue
	| et donc pas executee.


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Interruption Souris:                                |
|	Est appelee aÂ  chaque fois que la             |
|	souris bouge ou clique.                       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


__InterruptionSouris:			SUBC(XP,4,XP)
					JMP(XP)
	| On va a l'instrcution qui a ete interrompue
	| et donc pas executee.




|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|                                                     |
| Debut du programme:                                 |
|	Des que la machine demarre, elle va ici       |
|	et execute le code normalement.               |
|	souris bouge ou clique.                       |
|                                                     |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||

SCALE = 4
COLS = 800 / SCALE
ROWS = 600 / SCALE
NUMS = (COLS * ROWS) / 2


| On ne dessine pas dans la memoire video directement
| Mais dans ce buffer!


|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|
| Fonction qui efface le backbuffer
|
| effaceBackBuffer()
|
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


effaceBackBuffer:	PUSH(R1)
			PUSH(R2)
			PUSH(R3)
			LMOVE(backbuffer             , R1)	| Debut du backbuffer
			LMOVE(backbuffer + (4 * NUMS), R2)	| Fin du backbuffer

effaceBackBuffer1:	CMPLT(R1,R2,R3)				| boucle for
			BEQ(R3,effaceBackBuffer2,R31)

			ST(R31,0,R1)				| On efface le caractere

			ADDC(R1,4,R1)
			BEQ(R31,effaceBackBuffer1,R31)		| On boucle

effaceBackBuffer2:	POP(R3)
			POP(R2)
			POP(R1)
			JMP(LP,R31)



|||||||||||||||||||||||||||||||||||||||||||||||||||||||
|
| Fonction qui affiche le backbuffer a l'ecran
|
| afficherBackBuffer()
|
|||||||||||||||||||||||||||||||||||||||||||||||||||||||


afficherBackBuffer:	PUSH(R1)
			PUSH(R2)
			PUSH(R3)
			PUSH(R4)
			PUSH(R5)

			LMOVE(backbuffer , R1)			| Debut du backbuffer
			LMOVE(0x80000000 , R2)			| Debut de la memoire video

			CMOVE(0          , R3)			| Position dans le buffer
afficherBackBuffer1:	CMPLTL(R3,NUMS*4,R4)			| boucle for
			BEQ(R4,afficherBackBuffer2,R31)

			ADD(R1,R3,R4)				| Adresse du carractere dans le backbuffer
			LD(R4,0,R4)				| Valeur  du carractere dans le backbuffer

			ADD(R2,R3,R5)				| Adresse du carractere dans la memoire video
			ST(R4,0,R5)				| On efface le caractere

			ADDC(R3,4,R3)
			BEQ(R31,afficherBackBuffer1,R31)	| On boucle

afficherBackBuffer2:	POP(R5)
			POP(R4)
			POP(R3)
			POP(R2)
			POP(R1)
			JMP(LP,R31)


__DebutDuProgramme:	LMOVE(pile,SP)
			LMOVE(VIDEOADDRESS, R0)		| R0 = adresse de la memoire video
			LMOVE(backbuffer,R5)		| R5 = backbuffer
			CMOVE(SCALE,R1)			| R1 = 1
			ST(R1,-4,R0)			| Passage en mode graphic

			LMOVE(0x0FF000FF,R4)		| Couleur

boucle1:		CMOVE(0,R1)
						
			| On implente une boucle for:
boucle2:		CMPLTL(R1, NUMS, R2)
			BEQ(R2,boucle1,R31)

			CALL(attendHorloge)
			CALL(afficherBackBuffer)
			CALL(effaceBackBuffer)
			MULC(R1,4,R3)
			ADD(R3,R5,R3)

			ST(R4,0,R3)
			ST(R4,4,R3)
			ST(R4,8,R3)
			ST(R4,12,R3)
			ST(R4,16,R3)



			ADDC(R1,5,R1)

			BEQ(R31,boucle2,R31)

backbuffer:	STORAGE(NUMS)
pile = .