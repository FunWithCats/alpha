.include ../beta.uasm
.include ../lib.uasm
 		BEQ( R31 , __DebutDuProgramme , R31 )
 		BEQ( R31 , __InterruptionInstructionIllegale , R31 )
 		BEQ( R31 , __InterruptionHorloge , R31 )
 		BEQ( R31 , __InterruptionClavier , R31 )
 		BEQ( R31 , __InterruptionSouris , R31 )
__InterruptionInstructionIllegale:
		SUBC( R30 , 4 , R30 )
		JMP( R30 , R31 )
__InterruptionHorloge:
		SUBC( R30 , 4 , R30 )
		PUSH( R0 )
		CMOVE( 1 , R0 )
 		ST( R0 , horlogeTick , R31 )
		POP( R0 )
		JMP( R30 , R31 )
__InterruptionClavier:
		SUBC( R30 , 4 , R30 )
		JMP( R30 , R31 )
__InterruptionSouris:
		SUBC( R30 , 4 , R30 )
		JMP( R30 , R31 )
horlogeTick:	LONG(0)
attendHorloge:
		PUSH( R1 )
attendHorloge1:
 		LD( R31 , horlogeTick , R1 )
 		BEQ( R1 , attendHorloge1 , R31 )
 		ST( R31 , horlogeTick , R1 )
		POP( R1 )
		JMP( R28 , R31 )
effaceBackBuffer:
		PUSH( R1 )
		LMOVE( backbuffer , R1 )
		LMOVE( backbuffer + (2400 * 4) , R2 )
effaceBackBuffer1:
		CMPLT( R1 , R2 , R3 )
 		BEQ( R3 , effaceBackBuffer2 , R31 )
 		ST( R31 , 0 , R1 )
		ADDC( R1 , 4 , R1 )
 		BEQ( R31 , effaceBackBuffer1 , R31 )
effaceBackBuffer2:
		POP( R1 )
		JMP( R28 , R31 )
afficherBackBuffer:
		PUSH( R1 )
		PUSH( R2 )
		PUSH( R3 )
		PUSH( R4 )
		PUSH( R5 )
		LMOVE( backbuffer , R1 )
		LMOVE( 2147483648 , R2 )
		CMOVE( 0 , R3 )
afficherBackBuffer1:
		CMPLTC( R3 , 9600 , R4 )
 		BEQ( R4 , afficherBackBuffer2 , R31 )
		ADD( R1 , R3 , R4 )
 		LD( R4 , 0 , R4 )
		ADD( R2 , R3 , R5 )
 		ST( R4 , 0 , R5 )
		ADDC( R3 , 4 , R3 )
 		BEQ( R31 , afficherBackBuffer1 , R31 )
afficherBackBuffer2:
		POP( R5 )
		POP( R4 )
		POP( R3 )
		POP( R2 )
		POP( R1 )
		JMP( R28 , R31 )
afficherBalle:
		PUSH( R28 )
		PUSH( R27 )
		MOVE( R29 , R27 )
		PUSH( R1 )
		PUSH( R2 )
		PUSH( R3 )
		PUSH( R4 )
		LDARG( 0 , R1 )
		LDARG( 1 , R2 )
		LMOVE( 3530 , R3 )
		LMOVE( 7060 , R4 )
		DIV( R1 , R3 , R1 )
		DIV( R2 , R4 , R2 )
		MULC( R2 , 80 , R2 )
		ADD( R2 , R1 , R2 )
		MULC( R2 , 4 , R2 )
		LMOVE( backbuffer , R1 )
		ADD( R1 , R2 , R2 )
		LMOVE( 1048368 , R1 )
 		ST( R1 , 0 , R2 )
		POP( R4 )
		POP( R3 )
		POP( R2 )
		POP( R1 )
		POP( R27 )
		POP( R28 )
		JMP( R28 , R31 )
position:
		LONG( 20000 )
		LONG( 50000 )
position_x = position
position_y = position + 4
vitesse:
		LONG( 0 )
		LONG( 0 )
vitesse_x = vitesse
vitesse_y = vitesse + 4
prochainePosition:
		PUSH( R28 )
		PUSH( R27 )
		MOVE( R29 , R27 )
		PUSH( R1 )
		PUSH( R2 )
		PUSH( R3 )
		PUSH( R4 )
		PUSH( R5 )
		PUSH( R6 )
		PUSH( R7 )
 		LD( R31 , position_x , R1 )
 		LD( R31 , position_y , R2 )
 		LD( R31 , vitesse_x , R3 )
 		LD( R31 , vitesse_y , R4 )
		LDARG( 2 , R7 )
		MUL( R3 , R7 , R5 )
		DIVC( R5 , 1000 , R5 )
		ADD( R1 , R5 , R1 )
		MUL( R4 , R7 , R6 )
		DIVC( R6 , 1000 , R6 )
		ADD( R2 , R6 , R2 )
		CMPLTC( R1 , 0 , R5 )
 		BEQ( R5 , prochainePosition1 , R31 )
		MULC( R1 , -1 , R1 )
		MULC( R3 , -1 , R3 )
prochainePosition1:
		CMPLTC( R2 , 0 , R5 )
 		BEQ( R5 , prochainePosition2 , R31 )
		MULC( R2 , -1 , R2 )
		MULC( R4 , -1 , R4 )
prochainePosition2:
		CMPGEL( R1 , 282400 , R5 )
 		BEQ( R5 , prochainePosition3 , R31 )
		MULC( R1 , -1 , R1 )
		LMOVE( 564798 , R5 )
		ADD( R1 , R5 , R1 )
		MULC( R3 , -1 , R3 )
prochainePosition3:
		CMPGEL( R2 , 211800 , R5 )
 		BEQ( R5 , prochainePosition4 , R31 )
		MULC( R2 , -1 , R2 )
		LMOVE( 423598 , R5 )
		ADD( R2 , R5 , R2 )
		MULC( R4 , -1 , R4 )
prochainePosition4:
		LDARG( 0 , R5 )
		LDARG( 1 , R6 )
		MUL( R5 , R7 , R5 )
		DIVC( R5 , 1000 , R5 )
		ADD( R3 , R5 , R3 )
		MUL( R6 , R7 , R6 )
		DIVC( R6 , 1000 , R6 )
		ADD( R4 , R6 , R4 )
 		ST( R1 , position_x , R31 )
 		ST( R2 , position_y , R31 )
 		ST( R3 , vitesse_x , R31 )
 		ST( R4 , vitesse_y , R31 )
		POP( R7 )
		POP( R6 )
		POP( R5 )
		POP( R4 )
		POP( R3 )
		POP( R2 )
		POP( R1 )
		POP( R27 )
		POP( R28 )
		JMP( R28 , R31 )
__DebutDuProgramme:
		CMOVE( pile , R29 )
label1:
		CALL( attendHorloge , 0 )
		CALL( effaceBackBuffer , 0 )
 		LD( R31 , position_x , R1 )
 		LD( R31 , position_y , R2 )
		PUSH( R2 )
		PUSH( R1 )
		CALL( afficherBalle , 2 )
		CALL( afficherBackBuffer , 0 )
		LMOVE( 2000 , R1 )
		LMOVE( 200000 , R2 )
		CMOVE( 33 , R3 )
		PUSH( R3 )
		PUSH( R2 )
		PUSH( R1 )
		CALL( prochainePosition , 3 )
 		BEQ( R31 , label1 , R31 )
backbuffer:
		STORAGE( 2400 )
pile = .
